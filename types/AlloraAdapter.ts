/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type AlloraAdapterConstructorArgsStruct = {
  owner: AddressLike;
  aggregator: AddressLike;
};

export type AlloraAdapterConstructorArgsStructOutput = [
  owner: string,
  aggregator: string
] & { owner: string; aggregator: string };

export type NumericDataStruct = {
  topicId: BigNumberish;
  timestamp: BigNumberish;
  numericValue: BigNumberish;
  extraData: BytesLike;
};

export type NumericDataStructOutput = [
  topicId: bigint,
  timestamp: bigint,
  numericValue: bigint,
  extraData: string
] & {
  topicId: bigint;
  timestamp: bigint;
  numericValue: bigint;
  extraData: string;
};

export type TopicValueStruct = {
  recentValue: BigNumberish;
  recentValueTime: BigNumberish;
};

export type TopicValueStructOutput = [
  recentValue: bigint,
  recentValueTime: bigint
] & { recentValue: bigint; recentValueTime: bigint };

export type SignedNumericDataStruct = {
  signature: BytesLike;
  numericData: NumericDataStruct;
};

export type SignedNumericDataStructOutput = [
  signature: string,
  numericData: NumericDataStructOutput
] & { signature: string; numericData: NumericDataStructOutput };

export type AlloraAdapterNumericDataStruct = {
  signedNumericData: SignedNumericDataStruct[];
  extraData: BytesLike;
};

export type AlloraAdapterNumericDataStructOutput = [
  signedNumericData: SignedNumericDataStructOutput[],
  extraData: string
] & { signedNumericData: SignedNumericDataStructOutput[]; extraData: string };

export interface AlloraAdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NUMERIC_DATA_TYPEHASH"
      | "acceptOwnership"
      | "addDataProvider"
      | "aggregator"
      | "dataValiditySeconds"
      | "eip712Domain"
      | "getMessage"
      | "getTopicValue"
      | "owner"
      | "pendingOwner"
      | "removeDataProvider"
      | "renounceOwnership"
      | "switchedOn"
      | "topicValue"
      | "transferOwnership"
      | "turnOffAdapter"
      | "turnOnAdapter"
      | "updateAggregator"
      | "updateDataValiditySeconds"
      | "validDataProvider"
      | "verifyData"
      | "verifyDataViewOnly"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AlloraAdapterV2AdapterAdminTurnedOff"
      | "AlloraAdapterV2AdapterAdminTurnedOn"
      | "AlloraAdapterV2AdapterOwnerAddedDataProvider"
      | "AlloraAdapterV2AdapterOwnerRemovedDataProvider"
      | "AlloraAdapterV2AdapterOwnerUpdatedAggregator"
      | "AlloraAdapterV2AdapterOwnerUpdatedDataValiditySeconds"
      | "AlloraAdapterV2AdapterVerifiedData"
      | "EIP712DomainChanged"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "NUMERIC_DATA_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDataProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dataValiditySeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMessage",
    values: [NumericDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopicValue",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeDataProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "switchedOn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "topicValue",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "turnOffAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "turnOnAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAggregator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDataValiditySeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validDataProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyData",
    values: [AlloraAdapterNumericDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyDataViewOnly",
    values: [AlloraAdapterNumericDataStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "NUMERIC_DATA_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aggregator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dataValiditySeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMessage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTopicValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "switchedOn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "topicValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turnOffAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turnOnAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDataValiditySeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validDataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyDataViewOnly",
    data: BytesLike
  ): Result;
}

export namespace AlloraAdapterV2AdapterAdminTurnedOffEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AlloraAdapterV2AdapterAdminTurnedOnEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AlloraAdapterV2AdapterOwnerAddedDataProviderEvent {
  export type InputTuple = [dataProvider: AddressLike];
  export type OutputTuple = [dataProvider: string];
  export interface OutputObject {
    dataProvider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AlloraAdapterV2AdapterOwnerRemovedDataProviderEvent {
  export type InputTuple = [dataProvider: AddressLike];
  export type OutputTuple = [dataProvider: string];
  export interface OutputObject {
    dataProvider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AlloraAdapterV2AdapterOwnerUpdatedAggregatorEvent {
  export type InputTuple = [aggregator: AddressLike];
  export type OutputTuple = [aggregator: string];
  export interface OutputObject {
    aggregator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AlloraAdapterV2AdapterOwnerUpdatedDataValiditySecondsEvent {
  export type InputTuple = [dataValiditySeconds: BigNumberish];
  export type OutputTuple = [dataValiditySeconds: bigint];
  export interface OutputObject {
    dataValiditySeconds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AlloraAdapterV2AdapterVerifiedDataEvent {
  export type InputTuple = [
    topicId: BigNumberish,
    numericData: BigNumberish,
    dataProviders: AddressLike[],
    extraData: BytesLike
  ];
  export type OutputTuple = [
    topicId: bigint,
    numericData: bigint,
    dataProviders: string[],
    extraData: string
  ];
  export interface OutputObject {
    topicId: bigint;
    numericData: bigint;
    dataProviders: string[];
    extraData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AlloraAdapter extends BaseContract {
  connect(runner?: ContractRunner | null): AlloraAdapter;
  waitForDeployment(): Promise<this>;

  interface: AlloraAdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NUMERIC_DATA_TYPEHASH: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addDataProvider: TypedContractMethod<
    [dataProvider: AddressLike],
    [void],
    "nonpayable"
  >;

  aggregator: TypedContractMethod<[], [string], "view">;

  dataValiditySeconds: TypedContractMethod<[], [bigint], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  getMessage: TypedContractMethod<
    [numericData: NumericDataStruct],
    [string],
    "view"
  >;

  getTopicValue: TypedContractMethod<
    [topicId: BigNumberish, extraData: BytesLike],
    [TopicValueStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  removeDataProvider: TypedContractMethod<
    [dataProvider: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  switchedOn: TypedContractMethod<[], [boolean], "view">;

  topicValue: TypedContractMethod<
    [topicId: BigNumberish, extraData: BytesLike],
    [[bigint, bigint] & { recentValue: bigint; recentValueTime: bigint }],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  turnOffAdapter: TypedContractMethod<[], [void], "nonpayable">;

  turnOnAdapter: TypedContractMethod<[], [void], "nonpayable">;

  updateAggregator: TypedContractMethod<
    [_aggregator: AddressLike],
    [void],
    "nonpayable"
  >;

  updateDataValiditySeconds: TypedContractMethod<
    [_dataValiditySeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  validDataProvider: TypedContractMethod<
    [dataProvider: AddressLike],
    [boolean],
    "view"
  >;

  verifyData: TypedContractMethod<
    [nd: AlloraAdapterNumericDataStruct],
    [
      [bigint, bigint, string[], string] & {
        numericValue: bigint;
        topicId: bigint;
        dataProviders: string[];
        extraData: string;
      }
    ],
    "nonpayable"
  >;

  verifyDataViewOnly: TypedContractMethod<
    [nd: AlloraAdapterNumericDataStruct],
    [
      [bigint, bigint, string[], string] & {
        numericValue: bigint;
        topicId: bigint;
        dataProviders: string[];
        extraData: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NUMERIC_DATA_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addDataProvider"
  ): TypedContractMethod<[dataProvider: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "aggregator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dataValiditySeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMessage"
  ): TypedContractMethod<[numericData: NumericDataStruct], [string], "view">;
  getFunction(
    nameOrSignature: "getTopicValue"
  ): TypedContractMethod<
    [topicId: BigNumberish, extraData: BytesLike],
    [TopicValueStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeDataProvider"
  ): TypedContractMethod<[dataProvider: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "switchedOn"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "topicValue"
  ): TypedContractMethod<
    [topicId: BigNumberish, extraData: BytesLike],
    [[bigint, bigint] & { recentValue: bigint; recentValueTime: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "turnOffAdapter"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "turnOnAdapter"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAggregator"
  ): TypedContractMethod<[_aggregator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDataValiditySeconds"
  ): TypedContractMethod<
    [_dataValiditySeconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validDataProvider"
  ): TypedContractMethod<[dataProvider: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyData"
  ): TypedContractMethod<
    [nd: AlloraAdapterNumericDataStruct],
    [
      [bigint, bigint, string[], string] & {
        numericValue: bigint;
        topicId: bigint;
        dataProviders: string[];
        extraData: string;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyDataViewOnly"
  ): TypedContractMethod<
    [nd: AlloraAdapterNumericDataStruct],
    [
      [bigint, bigint, string[], string] & {
        numericValue: bigint;
        topicId: bigint;
        dataProviders: string[];
        extraData: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AlloraAdapterV2AdapterAdminTurnedOff"
  ): TypedContractEvent<
    AlloraAdapterV2AdapterAdminTurnedOffEvent.InputTuple,
    AlloraAdapterV2AdapterAdminTurnedOffEvent.OutputTuple,
    AlloraAdapterV2AdapterAdminTurnedOffEvent.OutputObject
  >;
  getEvent(
    key: "AlloraAdapterV2AdapterAdminTurnedOn"
  ): TypedContractEvent<
    AlloraAdapterV2AdapterAdminTurnedOnEvent.InputTuple,
    AlloraAdapterV2AdapterAdminTurnedOnEvent.OutputTuple,
    AlloraAdapterV2AdapterAdminTurnedOnEvent.OutputObject
  >;
  getEvent(
    key: "AlloraAdapterV2AdapterOwnerAddedDataProvider"
  ): TypedContractEvent<
    AlloraAdapterV2AdapterOwnerAddedDataProviderEvent.InputTuple,
    AlloraAdapterV2AdapterOwnerAddedDataProviderEvent.OutputTuple,
    AlloraAdapterV2AdapterOwnerAddedDataProviderEvent.OutputObject
  >;
  getEvent(
    key: "AlloraAdapterV2AdapterOwnerRemovedDataProvider"
  ): TypedContractEvent<
    AlloraAdapterV2AdapterOwnerRemovedDataProviderEvent.InputTuple,
    AlloraAdapterV2AdapterOwnerRemovedDataProviderEvent.OutputTuple,
    AlloraAdapterV2AdapterOwnerRemovedDataProviderEvent.OutputObject
  >;
  getEvent(
    key: "AlloraAdapterV2AdapterOwnerUpdatedAggregator"
  ): TypedContractEvent<
    AlloraAdapterV2AdapterOwnerUpdatedAggregatorEvent.InputTuple,
    AlloraAdapterV2AdapterOwnerUpdatedAggregatorEvent.OutputTuple,
    AlloraAdapterV2AdapterOwnerUpdatedAggregatorEvent.OutputObject
  >;
  getEvent(
    key: "AlloraAdapterV2AdapterOwnerUpdatedDataValiditySeconds"
  ): TypedContractEvent<
    AlloraAdapterV2AdapterOwnerUpdatedDataValiditySecondsEvent.InputTuple,
    AlloraAdapterV2AdapterOwnerUpdatedDataValiditySecondsEvent.OutputTuple,
    AlloraAdapterV2AdapterOwnerUpdatedDataValiditySecondsEvent.OutputObject
  >;
  getEvent(
    key: "AlloraAdapterV2AdapterVerifiedData"
  ): TypedContractEvent<
    AlloraAdapterV2AdapterVerifiedDataEvent.InputTuple,
    AlloraAdapterV2AdapterVerifiedDataEvent.OutputTuple,
    AlloraAdapterV2AdapterVerifiedDataEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AlloraAdapterV2AdapterAdminTurnedOff()": TypedContractEvent<
      AlloraAdapterV2AdapterAdminTurnedOffEvent.InputTuple,
      AlloraAdapterV2AdapterAdminTurnedOffEvent.OutputTuple,
      AlloraAdapterV2AdapterAdminTurnedOffEvent.OutputObject
    >;
    AlloraAdapterV2AdapterAdminTurnedOff: TypedContractEvent<
      AlloraAdapterV2AdapterAdminTurnedOffEvent.InputTuple,
      AlloraAdapterV2AdapterAdminTurnedOffEvent.OutputTuple,
      AlloraAdapterV2AdapterAdminTurnedOffEvent.OutputObject
    >;

    "AlloraAdapterV2AdapterAdminTurnedOn()": TypedContractEvent<
      AlloraAdapterV2AdapterAdminTurnedOnEvent.InputTuple,
      AlloraAdapterV2AdapterAdminTurnedOnEvent.OutputTuple,
      AlloraAdapterV2AdapterAdminTurnedOnEvent.OutputObject
    >;
    AlloraAdapterV2AdapterAdminTurnedOn: TypedContractEvent<
      AlloraAdapterV2AdapterAdminTurnedOnEvent.InputTuple,
      AlloraAdapterV2AdapterAdminTurnedOnEvent.OutputTuple,
      AlloraAdapterV2AdapterAdminTurnedOnEvent.OutputObject
    >;

    "AlloraAdapterV2AdapterOwnerAddedDataProvider(address)": TypedContractEvent<
      AlloraAdapterV2AdapterOwnerAddedDataProviderEvent.InputTuple,
      AlloraAdapterV2AdapterOwnerAddedDataProviderEvent.OutputTuple,
      AlloraAdapterV2AdapterOwnerAddedDataProviderEvent.OutputObject
    >;
    AlloraAdapterV2AdapterOwnerAddedDataProvider: TypedContractEvent<
      AlloraAdapterV2AdapterOwnerAddedDataProviderEvent.InputTuple,
      AlloraAdapterV2AdapterOwnerAddedDataProviderEvent.OutputTuple,
      AlloraAdapterV2AdapterOwnerAddedDataProviderEvent.OutputObject
    >;

    "AlloraAdapterV2AdapterOwnerRemovedDataProvider(address)": TypedContractEvent<
      AlloraAdapterV2AdapterOwnerRemovedDataProviderEvent.InputTuple,
      AlloraAdapterV2AdapterOwnerRemovedDataProviderEvent.OutputTuple,
      AlloraAdapterV2AdapterOwnerRemovedDataProviderEvent.OutputObject
    >;
    AlloraAdapterV2AdapterOwnerRemovedDataProvider: TypedContractEvent<
      AlloraAdapterV2AdapterOwnerRemovedDataProviderEvent.InputTuple,
      AlloraAdapterV2AdapterOwnerRemovedDataProviderEvent.OutputTuple,
      AlloraAdapterV2AdapterOwnerRemovedDataProviderEvent.OutputObject
    >;

    "AlloraAdapterV2AdapterOwnerUpdatedAggregator(address)": TypedContractEvent<
      AlloraAdapterV2AdapterOwnerUpdatedAggregatorEvent.InputTuple,
      AlloraAdapterV2AdapterOwnerUpdatedAggregatorEvent.OutputTuple,
      AlloraAdapterV2AdapterOwnerUpdatedAggregatorEvent.OutputObject
    >;
    AlloraAdapterV2AdapterOwnerUpdatedAggregator: TypedContractEvent<
      AlloraAdapterV2AdapterOwnerUpdatedAggregatorEvent.InputTuple,
      AlloraAdapterV2AdapterOwnerUpdatedAggregatorEvent.OutputTuple,
      AlloraAdapterV2AdapterOwnerUpdatedAggregatorEvent.OutputObject
    >;

    "AlloraAdapterV2AdapterOwnerUpdatedDataValiditySeconds(uint48)": TypedContractEvent<
      AlloraAdapterV2AdapterOwnerUpdatedDataValiditySecondsEvent.InputTuple,
      AlloraAdapterV2AdapterOwnerUpdatedDataValiditySecondsEvent.OutputTuple,
      AlloraAdapterV2AdapterOwnerUpdatedDataValiditySecondsEvent.OutputObject
    >;
    AlloraAdapterV2AdapterOwnerUpdatedDataValiditySeconds: TypedContractEvent<
      AlloraAdapterV2AdapterOwnerUpdatedDataValiditySecondsEvent.InputTuple,
      AlloraAdapterV2AdapterOwnerUpdatedDataValiditySecondsEvent.OutputTuple,
      AlloraAdapterV2AdapterOwnerUpdatedDataValiditySecondsEvent.OutputObject
    >;

    "AlloraAdapterV2AdapterVerifiedData(uint256,uint256,address[],bytes)": TypedContractEvent<
      AlloraAdapterV2AdapterVerifiedDataEvent.InputTuple,
      AlloraAdapterV2AdapterVerifiedDataEvent.OutputTuple,
      AlloraAdapterV2AdapterVerifiedDataEvent.OutputObject
    >;
    AlloraAdapterV2AdapterVerifiedData: TypedContractEvent<
      AlloraAdapterV2AdapterVerifiedDataEvent.InputTuple,
      AlloraAdapterV2AdapterVerifiedDataEvent.OutputTuple,
      AlloraAdapterV2AdapterVerifiedDataEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
