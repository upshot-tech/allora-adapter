/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type TopicValueStruct = {
  recentValue: BigNumberish;
  recentValueTime: BigNumberish;
};

export type TopicValueStructOutput = [
  recentValue: bigint,
  recentValueTime: bigint
] & { recentValue: bigint; recentValueTime: bigint };

export type NumericDataStruct = {
  topicId: BigNumberish;
  timestamp: BigNumberish;
  extraData: BytesLike;
  numericValues: BigNumberish[];
};

export type NumericDataStructOutput = [
  topicId: bigint,
  timestamp: bigint,
  extraData: string,
  numericValues: bigint[]
] & {
  topicId: bigint;
  timestamp: bigint;
  extraData: string;
  numericValues: bigint[];
};

export type AlloraAdapterNumericDataStruct = {
  signature: BytesLike;
  numericData: NumericDataStruct;
  extraData: BytesLike;
};

export type AlloraAdapterNumericDataStructOutput = [
  signature: string,
  numericData: NumericDataStructOutput,
  extraData: string
] & {
  signature: string;
  numericData: NumericDataStructOutput;
  extraData: string;
};

export interface IAlloraAdapterInterface extends Interface {
  getFunction(
    nameOrSignature: "getTopicValue" | "verifyData" | "verifyDataViewOnly"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTopicValue",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyData",
    values: [AlloraAdapterNumericDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyDataViewOnly",
    values: [AlloraAdapterNumericDataStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTopicValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyDataViewOnly",
    data: BytesLike
  ): Result;
}

export interface IAlloraAdapter extends BaseContract {
  connect(runner?: ContractRunner | null): IAlloraAdapter;
  waitForDeployment(): Promise<this>;

  interface: IAlloraAdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getTopicValue: TypedContractMethod<
    [topicId: BigNumberish, extraData: BytesLike],
    [TopicValueStructOutput],
    "view"
  >;

  verifyData: TypedContractMethod<
    [nd: AlloraAdapterNumericDataStruct],
    [[bigint, string] & { numericValue: bigint; dataProvider: string }],
    "nonpayable"
  >;

  verifyDataViewOnly: TypedContractMethod<
    [pd: AlloraAdapterNumericDataStruct],
    [[bigint, string] & { numericValue: bigint; dataProvider: string }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getTopicValue"
  ): TypedContractMethod<
    [topicId: BigNumberish, extraData: BytesLike],
    [TopicValueStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyData"
  ): TypedContractMethod<
    [nd: AlloraAdapterNumericDataStruct],
    [[bigint, string] & { numericValue: bigint; dataProvider: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyDataViewOnly"
  ): TypedContractMethod<
    [pd: AlloraAdapterNumericDataStruct],
    [[bigint, string] & { numericValue: bigint; dataProvider: string }],
    "view"
  >;

  filters: {};
}
